
/*
#if defined INCLUDE_C_PREPROC_KEYWORD
	INCLUDE_C_PREPROC_KEYWORD(nullptr, NO_TOKEN)
#elif defined INCLUDE_C_KEYWORD
	INCLUDE_C_KEYWORD(nullptr, NO_TOKEN)
#elif defined INCLUDE_CPP_KEYWORD
	INCLUDE_CPP_KEYWORD(nullptr, NO_TOKEN)
#elif defined INCLUDE_C_SHARED_KEYWORD
	INCLUDE_C_SHARED_KEYWORD(nullptr, NO_TOKEN)
#elif defined INCLUDE_CPP_SHARED_KEYWORD
	INCLUDE_CPP_SHARED_KEYWORD(nullptr, NO_TOKEN)
#endif
*/
#if INCLUDE_TOKENS

	#ifndef INCLUDE_TOKEN
	#define INCLUDE_TOKEN(x)
	#endif

	// null token
	INCLUDE_TOKEN(NULL_TOKEN)

	// Include miscellaneous tokens that aren't keywords
	INCLUDE_TOKEN(CHARACTER)
	INCLUDE_TOKEN(STRING)
	INCLUDE_TOKEN(IDENTIFIER)
	INCLUDE_TOKEN(DIGIT)

	INCLUDE_TOKEN(CHARACTER_LITERAL)
	INCLUDE_TOKEN(INTEGER_LITERAL)
	INCLUDE_TOKEN(FLOATING_LITERAL)
	INCLUDE_TOKEN(STRING_LITERAL)
	INCLUDE_TOKEN(BOOLEAN_LITERAL)

	INCLUDE_TOKEN(INCOMPLETE)
	//INCLUDE_TOKEN(HASH_INCOMPLETE)
	
	INCLUDE_TOKEN(HEADER_NAME)

	INCLUDE_TOKEN(Q_SPECIAL_TREATMENT_MARK)
	INCLUDE_TOKEN(MOC_TRUE)
	INCLUDE_TOKEN(MOC_FALSE)
	INCLUDE_TOKEN(MOC_INCLUDE_BEGIN)
	INCLUDE_TOKEN(MOC_INCLUDE_END)
	INCLUDE_TOKEN(Q_META_TOKEN_BEGIN)
	INCLUDE_TOKEN(Q_META_TOKEN_END)

	#ifdef INCLUDE_TOKEN
		#undef INCLUDE_TOKEN
	#endif

#endif

//===----------------------------------------------------------------------===//
// C Preprocessor keywords.
//
// These have meaning after a '#' at the start of a line. These define enums in
// the tok::pp_* namespace.  Note that IdentifierInfo::getPPKeywordID must be
// manually updated if something is added here.
// PPKEYWORD(not_keyword)
//===----------------------------------------------------------------------===//

#if INCLUDE_C_PREPROC_KEYWORDS

	#ifndef INCLUDE_C_PREPROC_KEYWORD
		#define INCLUDE_C_PREPROC_KEYWORD(x, y)
	#endif
	#ifndef INCLUDE_C_PREPROC_KEYWORD_ALIAS
		#define INCLUDE_C_PREPROC_KEYWORD_ALIAS(x, y)
	#endif

	// TODO INCLUDE_PREPROC_KEYWORD(0, NOTOKEN)
	// C99 6.10.1 - Conditional Inclusion.
	INCLUDE_C_PREPROC_KEYWORD("if", IF)
	INCLUDE_C_PREPROC_KEYWORD("ifdef", IFDEF)
	INCLUDE_C_PREPROC_KEYWORD("ifndef", IFNDEF)
	INCLUDE_C_PREPROC_KEYWORD("elif", ELIF)
	INCLUDE_C_PREPROC_KEYWORD("else", ELSE)
	INCLUDE_C_PREPROC_KEYWORD("endif", ENDIF)
	INCLUDE_C_PREPROC_KEYWORD("defined", DEFINED) // Reserved macro name

	// C99 6.10.2 - Source File Inclusion.
	INCLUDE_C_PREPROC_KEYWORD("include", INCLUDE)

	// C99 6.10.3 - Macro Replacement.
	INCLUDE_C_PREPROC_KEYWORD("define", DEFINE)
	INCLUDE_C_PREPROC_KEYWORD("undef", UNDEF)

	// C99 6.10.4 - Line Control.
	INCLUDE_C_PREPROC_KEYWORD("line", LINE)

	// C99 6.10.5 - Error Directive.
	INCLUDE_C_PREPROC_KEYWORD("error", ERROR)

	// C99 6.10.6 - Pragma Directive.
	INCLUDE_C_PREPROC_KEYWORD("pragma", PRAGMA)

	// C99 6.10.3.2 - The # Operator
	INCLUDE_C_PREPROC_KEYWORD("#", HASH)

	// C99 6.10.3.3 - The ## Operator
	INCLUDE_C_PREPROC_KEYWORD("##", HASHHASH)

	#ifdef INCLUDE_C_PREPROC_KEYWORD
		#undef INCLUDE_C_PREPROC_KEYWORD
	#endif
	#ifdef INCLUDE_C_PREPROC_KEYWORD_ALIAS
		#undef INCLUDE_C_PREPROC_KEYWORD_ALIAS
	#endif

#endif // #ifdef INCLUDE_C_PREPROCESSOR_KEYWORDS

//===----------------------------------------------------------------------===//
// Shared Keywords Between The C Preprocessor and Language.
//===----------------------------------------------------------------------===//

#if INCLUDE_C_SHARED_KEYWORDS || INCLUDE_CPP_SHARED_KEYWORDS

	#ifndef INCLUDE_C_SHARED_KEYWORD
		#ifdef INCLUDE_CPP_SHARED_KEYWORD
			#define INCLUDE_C_SHARED_KEYWORD(x, y) INCLUDE_CPP_SHARED_KEYWORD(x, y)
		#else
			#define INCLUDE_C_SHARED_KEYWORD(x, y)
		#endif
	#endif
	#ifndef INCLUDE_C_SHARED_KEYWORD_ALIAS
		#ifdef INCLUDE_CPP_SHARED_KEYWORD_ALIAS
			#define INCLUDE_C_SHARED_KEYWORD_ALIAS(x, y) INCLUDE_CPP_SHARED_KEYWORD_ALIAS(x, y)
		#else
			#define INCLUDE_C_SHARED_KEYWORD_ALIAS(x, y)
		#endif
	#endif

	// Puctuators
	INCLUDE_C_SHARED_KEYWORD("\n", NEWLINE)
	INCLUDE_C_SHARED_KEYWORD(" ", WHITESPACE)
	INCLUDE_C_SHARED_KEYWORD_ALIAS("\t", WHITESPACE_ALIAS)
	INCLUDE_C_SHARED_KEYWORD(",", COMMA)

	// Ternary Conditional
	INCLUDE_C_SHARED_KEYWORD("?", QUESTION)
	INCLUDE_C_SHARED_KEYWORD(":", COLON)

	INCLUDE_C_SHARED_KEYWORD("\"", QUOTE)
	INCLUDE_C_SHARED_KEYWORD("\'", SINGLEQUOTE)
	INCLUDE_C_SHARED_KEYWORD("\\", BACKSLASH)

	INCLUDE_C_SHARED_KEYWORD("(", LPAREN)
	INCLUDE_C_SHARED_KEYWORD(")", RPAREN)

	// Arithmetic Operators
	INCLUDE_C_SHARED_KEYWORD("+", PLUS) // Integer promotion, array decay
	INCLUDE_C_SHARED_KEYWORD("-", MINUS) // Or Additive inverse
	INCLUDE_C_SHARED_KEYWORD("*", STAR) // Pointer declaration, dereference, multiplication
	INCLUDE_C_SHARED_KEYWORD("/", SLASH) // Division
	INCLUDE_C_SHARED_KEYWORD("%", PERCENT)

	// Bitwise operators
	INCLUDE_C_SHARED_KEYWORD("^", XOR)
	INCLUDE_C_SHARED_KEYWORD("&", AND)
	INCLUDE_C_SHARED_KEYWORD("|", OR)
	INCLUDE_C_SHARED_KEYWORD("~", TILDE)
	INCLUDE_C_SHARED_KEYWORD("<<", LTLT)
	INCLUDE_C_SHARED_KEYWORD(">>", GTGT)

	// Relational operators
	INCLUDE_C_SHARED_KEYWORD("==", EQEQ)
	INCLUDE_C_SHARED_KEYWORD("!=", NE)
	INCLUDE_C_SHARED_KEYWORD(">", RANGLE)
	INCLUDE_C_SHARED_KEYWORD("<", LANGLE)
	INCLUDE_C_SHARED_KEYWORD(">=", GE)
	INCLUDE_C_SHARED_KEYWORD("<=", LE)

	// Logical operators
	INCLUDE_C_SHARED_KEYWORD("!", NOT)
	INCLUDE_C_SHARED_KEYWORD("&&", ANDAND)
	INCLUDE_C_SHARED_KEYWORD("||", OROR)

	// Comment
	INCLUDE_C_SHARED_KEYWORD("/*", C_COMMENT)

	#ifdef INCLUDE_C_SHARED_KEYWORD
		#undef INCLUDE_C_SHARED_KEYWORD
	#endif
	#ifdef INCLUDE_C_SHARED_KEYWORD_ALIAS
		#undef INCLUDE_C_SHARED_KEYWORD_ALIAS
	#endif

#endif // #if INCLUDE_C_SHARED_KEYWORDS || INCLUDE_CPP_SHARED_KEYWORDS

//===----------------------------------------------------------------------===//
// C99 6.4.1: Keywords and Puctuators.
//===----------------------------------------------------------------------===//

#if INCLUDE_C_KEYWORDS || INCLUDE_CPP_KEYWORDS

	#ifndef INCLUDE_C_KEYWORD
		#ifdef INCLUDE_CPP_KEYWORD
			#define INCLUDE_C_KEYWORD(x, y) INCLUDE_CPP_KEYWORD(x, y)
		#else
			#define INCLUDE_C_KEYWORD(x, y)
		#endif
	#endif
	#ifndef INCLUDE_C_KEYWORD_ALIAS
		#ifdef INCLUDE_CPP_KEYWORD_ALIAS
			#define INCLUDE_C_KEYWORD_ALIAS(x, y) INCLUDE_CPP_KEYWORD_ALIAS(x, y)
		#else
			#define INCLUDE_C_KEYWORD_ALIAS(x, y)
		#endif
	#endif

	INCLUDE_C_KEYWORD("...", ELIPSIS)
	INCLUDE_C_KEYWORD(".", DOT) // Member selection operator
	INCLUDE_C_KEYWORD(";", SEMIC)

	INCLUDE_C_KEYWORD("[", LBRACK)
	INCLUDE_C_KEYWORD("]", RBRACK)
	INCLUDE_C_KEYWORD("{", LBRACE)
	INCLUDE_C_KEYWORD("}", RBRACE)

	// Compound Assignment Operators
	INCLUDE_C_KEYWORD("+=", PLUS_EQ)
	INCLUDE_C_KEYWORD("-=", MINUS_EQ)
	INCLUDE_C_KEYWORD("*=", STAR_EQ)
	INCLUDE_C_KEYWORD("/=", SLASH_EQ)
	INCLUDE_C_KEYWORD("%=", PERCENT_EQ)
	INCLUDE_C_KEYWORD("&=", AND_EQ)
	INCLUDE_C_KEYWORD("|=", OR_EQ)
	INCLUDE_C_KEYWORD("^=", XOR_EQ)
	INCLUDE_C_KEYWORD("<<=", LTLT_EQ)
	INCLUDE_C_KEYWORD(">>=", GTGT_EQ)

	// Increment and Decrement Operators
	INCLUDE_C_KEYWORD("++", INCR)
	INCLUDE_C_KEYWORD("--", DECR)

	// Storage Class Specifiers
	INCLUDE_C_KEYWORD("auto", AUTO)
	INCLUDE_C_KEYWORD("register", REGISTER)
	INCLUDE_C_KEYWORD("static", STATIC)
	INCLUDE_C_KEYWORD("extern", EXTERN)

	INCLUDE_C_KEYWORD("restrict", RESTRICT)
	INCLUDE_C_KEYWORD("sizeof", SIZEOF)
	INCLUDE_C_KEYWORD("typedef", TYPEDEF)
	INCLUDE_C_KEYWORD("enum", ENUM)
	INCLUDE_C_KEYWORD("struct", STRUCT)
	INCLUDE_C_KEYWORD("union", UNION)
	INCLUDE_C_KEYWORD("inline", INLINE)

	// Control Flow Keywords
	INCLUDE_C_KEYWORD("if", IF)
	INCLUDE_C_KEYWORD("else", ELSE)
	INCLUDE_C_KEYWORD("for", FOR)
	INCLUDE_C_KEYWORD("while", WHILE)
	INCLUDE_C_KEYWORD("do", DO)
	INCLUDE_C_KEYWORD("switch", SWITCH)
	INCLUDE_C_KEYWORD("case", CASE)
	INCLUDE_C_KEYWORD("break", BREAK)
	INCLUDE_C_KEYWORD("continue", CONTINUE)
	INCLUDE_C_KEYWORD("default", DEFAULT)
	INCLUDE_C_KEYWORD("goto", GOTO)
	INCLUDE_C_KEYWORD("return", RETURN)

	// Type Specifiers
	INCLUDE_C_KEYWORD("const", CONST)
	INCLUDE_C_KEYWORD("volatile", VOLATILE)

	// Literal Type Keywords
	INCLUDE_C_KEYWORD("signed", SIGNED)
	INCLUDE_C_KEYWORD("unsigned", UNSIGNED)
	INCLUDE_C_KEYWORD("void", VOID)
	INCLUDE_C_KEYWORD("char", CHAR)
	INCLUDE_C_KEYWORD("short", SHORT)
	INCLUDE_C_KEYWORD("int", INT)
	INCLUDE_C_KEYWORD("long", LONG)
	INCLUDE_C_KEYWORD("float", FLOAT)
	INCLUDE_C_KEYWORD("double", DOUBLE)

	#ifdef INCLUDE_C_KEYWORD
		#undef INCLUDE_C_KEYWORD
	#endif
	#ifdef INCLUDE_C_KEYWORD_ALIAS
		#undef INCLUDE_C_KEYWORD_ALIAS
	#endif

#endif // #ifdef INCLUDE_C_KEYWORDS

//===----------------------------------------------------------------------===//
// Shared *NEW* Keywords Between The C++ Preprocessor and Language.
//===----------------------------------------------------------------------===//

#if INCLUDE_CPP_SHARED_KEYWORDS

	#ifndef INCLUDE_CPP_SHARED_KEYWORD
		#define INCLUDE_CPP_SHARED_KEYWORD(x, y)
	#endif
	#ifndef INCLUDE_CPP_SHARED_KEYWORD_ALIAS
		#define INCLUDE_CPP_SHARED_KEYWORD_ALIAS(x, y)
	#endif

	// C++
	// Relational operators
	INCLUDE_CPP_SHARED_KEYWORD_ALIAS("not_eq", NE_ALIAS)

	// Bitwise operators
	INCLUDE_CPP_SHARED_KEYWORD_ALIAS("bitand", AND_ALIAS)
	INCLUDE_CPP_SHARED_KEYWORD_ALIAS("bitor", OR_ALIAS)
	INCLUDE_CPP_SHARED_KEYWORD_ALIAS("compl", TILDE_ALIAS)
	INCLUDE_CPP_SHARED_KEYWORD_ALIAS("xor", XOR_ALIAS)

	// Logical operators
	INCLUDE_CPP_SHARED_KEYWORD_ALIAS("and", ANDAND_ALIAS)
	INCLUDE_CPP_SHARED_KEYWORD_ALIAS("or", OROR_ALIAS)
	INCLUDE_CPP_SHARED_KEYWORD_ALIAS("not", NOT_ALIAS)

	// Comment
	INCLUDE_CPP_SHARED_KEYWORD("//", CPP_COMMENT)

	// The ## Operator
	INCLUDE_CPP_SHARED_KEYWORD_ALIAS("%:%:", HASHHASH_ALIAS)

	#ifdef INCLUDE_CPP_SHARED_KEYWORD
		#undef INCLUDE_CPP_SHARED_KEYWORD
	#endif
	#ifdef INCLUDE_CPP_SHARED_KEYWORD_ALIAS
		#undef INCLUDE_CPP_SHARED_KEYWORD_ALIAS
	#endif

#endif // #if INCLUDE_CPP_SHARED_KEYWORDS

//===----------------------------------------------------------------------===//
// C++ 2.11p1: *NEW* Keywords.
//===----------------------------------------------------------------------===//

#if INCLUDE_CPP_KEYWORDS

	#ifndef INCLUDE_CPP_KEYWORD
		#define INCLUDE_CPP_KEYWORD(x, y)
	#endif
	#ifndef INCLUDE_CPP_KEYWORD_ALIAS
		#define INCLUDE_CPP_KEYWORD_ALIAS(x, y)
	#endif

	// Alternative Representations
	INCLUDE_CPP_KEYWORD_ALIAS("<:", LBRACK_ALIAS)
	INCLUDE_CPP_KEYWORD_ALIAS(":>", RBRACK_ALIAS)
	INCLUDE_CPP_KEYWORD("<::", LANGLE_SCOPE)
	INCLUDE_CPP_KEYWORD_ALIAS("<%", LBRACE_ALIAS)
	INCLUDE_CPP_KEYWORD_ALIAS("%>", RBRACE_ALIAS)
	INCLUDE_CPP_KEYWORD("=", EQ)

	INCLUDE_CPP_KEYWORD("::", SCOPE) // Scope resolution operator
	INCLUDE_CPP_KEYWORD(".*", DOTSTAR)

	// Literal Type Keywords
	INCLUDE_CPP_KEYWORD("bool", BOOL)
	INCLUDE_CPP_KEYWORD("wchar", WCHAR)

	// Explicit Type Converters
	INCLUDE_CPP_KEYWORD("const_cast", CONST_CAST)
	INCLUDE_CPP_KEYWORD("static_cast", STATIC_CAST)
	INCLUDE_CPP_KEYWORD("dynamic_cast", DYNAMIC_CAST)
	INCLUDE_CPP_KEYWORD("reinterpret_cast", REINTERPRET_CAST)

	// Exceptions
	INCLUDE_CPP_KEYWORD("try", TRY)
	INCLUDE_CPP_KEYWORD("catch", CATCH)
	INCLUDE_CPP_KEYWORD("throw", THROW)

	// Type Specifiers
	INCLUDE_CPP_KEYWORD("mutable", MUTABLE)

	// Access Specifiers
	INCLUDE_CPP_KEYWORD("public", PUBLIC)
	INCLUDE_CPP_KEYWORD("protected", PROTECTED)
	INCLUDE_CPP_KEYWORD("private", PRIVATE)

	// Memory Management Operators
	INCLUDE_CPP_KEYWORD("new", NEW)
	INCLUDE_CPP_KEYWORD("delete", DELETE)

	// Member Reference Operators
	INCLUDE_CPP_KEYWORD("->*", ARROW_STAR)
	INCLUDE_CPP_KEYWORD("->", ARROW)


	INCLUDE_CPP_KEYWORD("typeid", TYPEID)
	INCLUDE_CPP_KEYWORD("this", THIS)
	INCLUDE_CPP_KEYWORD("template", TEMPLATE)
	INCLUDE_CPP_KEYWORD("export", EXPORT)
	INCLUDE_CPP_KEYWORD("friend", FRIEND)
	INCLUDE_CPP_KEYWORD("class", CLASS)
	INCLUDE_CPP_KEYWORD("using", USING)
	INCLUDE_CPP_KEYWORD("namespace", NAMESPACE)
	INCLUDE_CPP_KEYWORD("virtual", VIRTUAL)
	INCLUDE_CPP_KEYWORD("asm", ASM)
	INCLUDE_CPP_KEYWORD("explicit", EXPLICIT)
	INCLUDE_CPP_KEYWORD("operator", OPERATOR)



	INCLUDE_CPP_KEYWORD("Q_OBJECT", Q_OBJECT_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_NAMESPACE", Q_NAMESPACE_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_GADGET", Q_GADGET_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_PROPERTY", Q_PROPERTY_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_PLUGIN_METADATA", Q_PLUGIN_METADATA_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_ENUMS", Q_ENUMS_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_ENUM", Q_ENUM_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_ENUM_NS", Q_ENUM_NS_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_FLAGS", Q_FLAGS_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_FLAG", Q_FLAG_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_FLAG_NS", Q_FLAG_NS_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_DECLARE_FLAGS", Q_DECLARE_FLAGS_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_DECLARE_INTERFACE", Q_DECLARE_INTERFACE_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_DECLARE_METATYPE", Q_DECLARE_METATYPE_TOKEN)
	INCLUDE_CPP_KEYWORD_ALIAS("Q_DECLARE_EXTENSION_INTERFACE", Q_DECLARE_INTERFACE_TOKEN_ALIAS)
	INCLUDE_CPP_KEYWORD_ALIAS("Q_SETS", Q_FLAGS_TOKEN_ALIAS)
	INCLUDE_CPP_KEYWORD("Q_CLASSINFO", Q_CLASSINFO_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_INTERFACES", Q_INTERFACES_TOKEN)
	INCLUDE_CPP_KEYWORD("signals", SIGNALS)
	INCLUDE_CPP_KEYWORD("slots", SLOTS)
	INCLUDE_CPP_KEYWORD("Q_SIGNALS", Q_SIGNALS_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_SLOTS", Q_SLOTS_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_PRIVATE_SLOT", Q_PRIVATE_SLOT_TOKEN)
	INCLUDE_CPP_KEYWORD("QT_MOC_COMPAT", Q_MOC_COMPAT_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_INVOKABLE", Q_INVOKABLE_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_SIGNAL", Q_SIGNAL_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_SLOT", Q_SLOT_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_SCRIPTABLE", Q_SCRIPTABLE_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_PRIVATE_PROPERTY", Q_PRIVATE_PROPERTY_TOKEN)
	INCLUDE_CPP_KEYWORD("Q_REVISION", Q_REVISION_TOKEN)

	#ifdef INCLUDE_CPP_KEYWORD
		#undef INCLUDE_CPP_KEYWORD
	#endif
	#ifdef INCLUDE_CPP_KEYWORD_ALIAS
		#undef INCLUDE_CPP_KEYWORD_ALIAS
	#endif

#endif // #ifdef INCLUDE_CPP_KEYWORDS

#ifdef INCLUDE_TOKENS
	#undef INCLUDE_TOKENS
#endif
#ifdef INCLUDE_C_PREPROC_KEYWORDS
	#undef INCLUDE_C_PREPROC_KEYWORDS
#endif
#ifdef INCLUDE_C_KEYWORDS
	#undef INCLUDE_C_KEYWORDS
#endif
#ifdef INCLUDE_CPP_KEYWORDS
	#undef INCLUDE_CPP_KEYWORDS
#endif
#ifdef INCLUDE_CSHARED_KEYWORDS
	#undef INCLUDE_CSHARED_KEYWORDS
#endif
#ifdef INCLUDE_CPP_SHARED_KEYWORDS
	#undef INCLUDE_CPP_SHARED_KEYWORDS
#endif
